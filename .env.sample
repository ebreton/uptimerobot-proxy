# Heroku
########

# `HEROKU_APP` needs to be set manually after the provision of the app on Heroku
# -> ***-***-xxx (returned by Heroku)
#
#     You can create an Heroku app by passing a name (`heroku apps:create my-name`), or simply
#     letting heroku setting one for your (`heroku apps:create`). See more details in 
#     [Heroku Dev center](https://devcenter.heroku.com/articles/heroku-cli-commands#apps-create)
#HEROKU_APP=<your-app>

# Heroku credentials are the ones you will use for [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli) 
HEROKU_USERNAME=<your-username>
HEROKU_PASSWORD=<your-password>

# Derived variable used by Heroku CLI
HEROKU_URL=https://$(HEROKU_APP).herokuapp.com/
HEROKU_GIT=https://git.heroku.com/$(HEROKU_APP).git

# DB
####

# `STORAGE_TYPE` controls where to store the data, with two options:
# -> entities.storage (default value): 
#     in memory, which means NOT persisted, and cleared when the application restarts, or scales
# -> models.storage
#     in DB, for persistency. In this case, it will look at 2 other variables to get the connection 
#     string: DB_URI_VAR_NAME (see below)
STORAGE_TYPE=entities.storage

# `DB_URI_VAR_NAME` stores the name of another environment variable.
# -> DATABASE_URL (default value)
# -> HEROKU_POSTGRESQL_***_URL (returned by Heroku)
#
#     This level of abstraction is needed for Heroku, as mentioned in their [documentation](https://devcenter.heroku.com/articles/heroku-postgresql#provisioning-heroku-postgres):
#     As part of the provisioning process, a DATABASE_URL config var is added to your app’s
#     configuration. This contains the URL your app uses to access the database. If your app already
#     has a Heroku Postgres database and you’ve just provisioned another one, this config var’s
#     name instead has the format HEROKU_POSTGRESQL_<COLOR>_URL 
#     (for example, HEROKU_POSTGRESQL_YELLOW_URL).
DB_URI_VAR_NAME=DATABASE_URL

# `DATABASE_URL` stores the connection string to the Database. 
# -> dialect://username:password@host:port/database
#
#     (!) It is only used if you have STORAGE_TYPE=models.storage
#     The format defined by [SQLAlchemy](http://docs.sqlalchemy.org/en/latest/core/engines.html)
DATABASE_URL=sqlite:////tmp/test.db

# Service
####

# `E2EMONITORING_SERVICE` is EPFL specific, it is the identifier of the service monitored
# -> SVC*****
E2EMONITORING_SERVICE=<service id>

# `E2EMONITORING_URL` is the URL where to forward the alerts to. 
# -> https://user:password@it-test.epfl.ch/api/now/import/u_event_api?
#
#     It should include the authentication credentials if any required
E2EMONITORING_URL=https://e2e-monitoring.com/your-url

# running dev server
#APP_SECRET=<uuit>
FLASK_APP=src/hello.py
FLASK_DEBUG=1
CODECOV_TOKEN=<your codecov token>

# running local gunicorn
GUNICORN_APP=hello:app

# python path to run tests
